{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar hasOwnProperty = {}.hasOwnProperty;\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat();\n  } else if (x && typeof x === 'object') {\n    return _assign(new x.constructor(), x);\n  } else {\n    return x;\n  }\n}\n\nvar COMMAND_PUSH = '$push';\nvar COMMAND_UNSHIFT = '$unshift';\nvar COMMAND_SPLICE = '$splice';\nvar COMMAND_SET = '$set';\nvar COMMAND_MERGE = '$merge';\nvar COMMAND_APPLY = '$apply';\nvar ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];\nvar ALL_COMMANDS_SET = {};\nALL_COMMANDS_LIST.forEach(function (command) {\n  ALL_COMMANDS_SET[command] = true;\n});\n\nfunction invariantArrayCase(value, spec, command) {\n  invariant(Array.isArray(value), 'update(): expected target of %s to be an array; got %s.', command, value);\n  var specValue = spec[command];\n  invariant(Array.isArray(specValue), 'update(): expected spec of %s to be an array; got %s. ' + 'Did you forget to wrap your parameter in an array?', command, specValue);\n}\n/**\n * Returns a updated shallow copy of an object without mutating the original.\n * See https://facebook.github.io/react/docs/update.html for details.\n */\n\n\nfunction update(value, spec) {\n  invariant(typeof spec === 'object', 'update(): You provided a key path to update() that did not contain one ' + 'of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET);\n\n  if (hasOwnProperty.call(spec, COMMAND_SET)) {\n    invariant(Object.keys(spec).length === 1, 'Cannot have more than one key in an object with %s', COMMAND_SET);\n    return spec[COMMAND_SET];\n  }\n\n  var nextValue = shallowCopy(value);\n\n  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n    var mergeObj = spec[COMMAND_MERGE];\n    invariant(mergeObj && typeof mergeObj === 'object', \"update(): %s expects a spec of type 'object'; got %s\", COMMAND_MERGE, mergeObj);\n    invariant(nextValue && typeof nextValue === 'object', \"update(): %s expects a target of type 'object'; got %s\", COMMAND_MERGE, nextValue);\n\n    _assign(nextValue, spec[COMMAND_MERGE]);\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH);\n    spec[COMMAND_PUSH].forEach(function (item) {\n      nextValue.push(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n    spec[COMMAND_UNSHIFT].forEach(function (item) {\n      nextValue.unshift(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n    invariant(Array.isArray(value), 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value);\n    invariant(Array.isArray(spec[COMMAND_SPLICE]), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]);\n    spec[COMMAND_SPLICE].forEach(function (args) {\n      invariant(Array.isArray(args), 'update(): expected spec of %s to be an array of arrays; got %s. ' + 'Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]);\n      nextValue.splice.apply(nextValue, args);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n    invariant(typeof spec[COMMAND_APPLY] === 'function', 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]);\n    nextValue = spec[COMMAND_APPLY](nextValue);\n  }\n\n  for (var k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k]);\n    }\n  }\n\n  return nextValue;\n}\n\nmodule.exports = update;","map":{"version":3,"sources":["/home/william/COMPOUNDERGUI/CompounderGUI/node_modules/react-addons-update/index.js"],"names":["_assign","require","invariant","hasOwnProperty","shallowCopy","x","Array","isArray","concat","constructor","COMMAND_PUSH","COMMAND_UNSHIFT","COMMAND_SPLICE","COMMAND_SET","COMMAND_MERGE","COMMAND_APPLY","ALL_COMMANDS_LIST","ALL_COMMANDS_SET","forEach","command","invariantArrayCase","value","spec","specValue","update","join","call","Object","keys","length","nextValue","mergeObj","item","push","unshift","args","splice","apply","k","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\nvar invariant = require('fbjs/lib/invariant');\nvar hasOwnProperty = {}.hasOwnProperty;\n\nfunction shallowCopy(x) {\n  if (Array.isArray(x)) {\n    return x.concat();\n  } else if (x && typeof x === 'object') {\n    return _assign(new x.constructor(), x);\n  } else {\n    return x;\n  }\n}\n\nvar COMMAND_PUSH = '$push';\nvar COMMAND_UNSHIFT = '$unshift';\nvar COMMAND_SPLICE = '$splice';\nvar COMMAND_SET = '$set';\nvar COMMAND_MERGE = '$merge';\nvar COMMAND_APPLY = '$apply';\n\nvar ALL_COMMANDS_LIST = [\n  COMMAND_PUSH,\n  COMMAND_UNSHIFT,\n  COMMAND_SPLICE,\n  COMMAND_SET,\n  COMMAND_MERGE,\n  COMMAND_APPLY\n];\n\nvar ALL_COMMANDS_SET = {};\n\nALL_COMMANDS_LIST.forEach(function(command) {\n  ALL_COMMANDS_SET[command] = true;\n});\n\nfunction invariantArrayCase(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  );\n  var specValue = spec[command];\n  invariant(\n    Array.isArray(specValue),\n    'update(): expected spec of %s to be an array; got %s. ' +\n      'Did you forget to wrap your parameter in an array?',\n    command,\n    specValue\n  );\n}\n\n/**\n * Returns a updated shallow copy of an object without mutating the original.\n * See https://facebook.github.io/react/docs/update.html for details.\n */\nfunction update(value, spec) {\n  invariant(\n    typeof spec === 'object',\n    'update(): You provided a key path to update() that did not contain one ' +\n      'of %s. Did you forget to include {%s: ...}?',\n    ALL_COMMANDS_LIST.join(', '),\n    COMMAND_SET\n  );\n\n  if (hasOwnProperty.call(spec, COMMAND_SET)) {\n    invariant(\n      Object.keys(spec).length === 1,\n      'Cannot have more than one key in an object with %s',\n      COMMAND_SET\n    );\n\n    return spec[COMMAND_SET];\n  }\n\n  var nextValue = shallowCopy(value);\n\n  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {\n    var mergeObj = spec[COMMAND_MERGE];\n    invariant(\n      mergeObj && typeof mergeObj === 'object',\n      \"update(): %s expects a spec of type 'object'; got %s\",\n      COMMAND_MERGE,\n      mergeObj\n    );\n    invariant(\n      nextValue && typeof nextValue === 'object',\n      \"update(): %s expects a target of type 'object'; got %s\",\n      COMMAND_MERGE,\n      nextValue\n    );\n    _assign(nextValue, spec[COMMAND_MERGE]);\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {\n    invariantArrayCase(value, spec, COMMAND_PUSH);\n    spec[COMMAND_PUSH].forEach(function(item) {\n      nextValue.push(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {\n    invariantArrayCase(value, spec, COMMAND_UNSHIFT);\n    spec[COMMAND_UNSHIFT].forEach(function(item) {\n      nextValue.unshift(item);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {\n    invariant(\n      Array.isArray(value),\n      'Expected %s target to be an array; got %s',\n      COMMAND_SPLICE,\n      value\n    );\n    invariant(\n      Array.isArray(spec[COMMAND_SPLICE]),\n      'update(): expected spec of %s to be an array of arrays; got %s. ' +\n        'Did you forget to wrap your parameters in an array?',\n      COMMAND_SPLICE,\n      spec[COMMAND_SPLICE]\n    );\n    spec[COMMAND_SPLICE].forEach(function(args) {\n      invariant(\n        Array.isArray(args),\n        'update(): expected spec of %s to be an array of arrays; got %s. ' +\n          'Did you forget to wrap your parameters in an array?',\n        COMMAND_SPLICE,\n        spec[COMMAND_SPLICE]\n      );\n      nextValue.splice.apply(nextValue, args);\n    });\n  }\n\n  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {\n    invariant(\n      typeof spec[COMMAND_APPLY] === 'function',\n      'update(): expected spec of %s to be a function; got %s.',\n      COMMAND_APPLY,\n      spec[COMMAND_APPLY]\n    );\n    nextValue = spec[COMMAND_APPLY](nextValue);\n  }\n\n  for (var k in spec) {\n    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {\n      nextValue[k] = update(value[k], spec[k]);\n    }\n  }\n\n  return nextValue;\n}\n\nmodule.exports = update;\n"]},"metadata":{},"sourceType":"script"}